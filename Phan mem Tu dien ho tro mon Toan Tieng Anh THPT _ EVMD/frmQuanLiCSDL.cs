using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars; //Khai bao thu vien ItemClick trên cac event cua DevExpress
using DevExpress.XtraEditors; //Khai bao thu vien edit qua DevExpress
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid; //Khi bao thu vien GridView
using DevExpress.Export.Xl; //Xuat file Excel


namespace Phan_mem_Tu_dien_ho_tro_mon_Toan_Tieng_Anh_THPT___EVMD
{
    public partial class frmQuanLiCSDL : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        public int lop;

        public frmQuanLiCSDL()
        {
            InitializeComponent();
            this.MaximizeBox = false;
            this.AutoSize = true;
            txtDem.Properties.Appearance.TextOptions.HAlignment 
                = DevExpress.Utils.HorzAlignment.Center;

            // This line of code is generated by Data Source Configuration Wizard
            //dgvVocab.DataSource = 
            //    new Phan_mem_Tu_dien_ho_tro_mon_Toan_Tieng_Anh_THPT___EVMD
            //    .dbmlDataDataContext().Datas;
        }
        public void ChangeData() //List<Data> ldt
        {
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var Data = db.Datas.Where(D => D.Word != null).ToList();
                foreach (Data dt in Data)
                {
                    string word = dt.Word;
                    string meaning = dt.Meaning;
                    string usage = dt.Usage;
                    string example = dt.Example;

                    dt.Word = word;
                    dt.Meaning = meaning;
                    dt.Usage = usage;
                    dt.Example = example;

                    if (dt.Lop10 == null)
                        dt.Lop10 = false;
                    if (dt.Lop11 == null)
                        dt.Lop11 = false;
                    if (dt.Lop12 == null)
                        dt.Lop12 = false;
                    //if (dt.Usage.Contains("noun"))
                    //    dt.Usage = "danh từ (noun)";
                    //if (dt.Usage.Contains("VERB"))
                    //    dt.Usage = "động từ (verb)";
                    //if (dt.Usage.Contains("ADJECTIVE"))
                    //    dt.Usage = "tính từ (adjective)";
                    db.SubmitChanges();
                }
            }
        }
        void LoadTuVung2Dgv(List<Data> ldt)
        {
            //ChangeData();
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var dsTuVung = db.Datas.ToList();
                dgvVocab.DataSource = dsTuVung;
                var dsGrade = db.Grades.ToList();

                //List<Data> ldt1 = new List<Data>();
                //foreach (Data dt in ldt)
                //{
                //    //cbbGrade.DataBindings.Add();
                //    cbbGrade.Properties.Items.Add(dt.Word);
                //}

                //cbbGrade.DataBindings.Add("MaGrade", dsGrade, "MaGrade");
                //cbbGrade.Properties.Items.Add("Đạt");
                //cbbGrade.Properties.EndUpdate();
                int dem = db.Datas.Count();
                txtDem.Text = Convert.ToString(dem);
            }

        }

        private void frmQuanLiCSDL_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'gradeDataSet.Grade' table. You can move, or remove it, as needed.
            //this.gradeTableAdapter.Fill(this.gradeDataSet.Grade);
            // TODO: This line of code loads data into the 'eVMDDataSet1.Data' table. You can move, or remove it, as needed.
            //this.dataTableAdapter.Fill(this.eVMDDataSet1.Data);

            //Load Data
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var data = db.Datas.ToList();
                LoadTuVung2Dgv(data);
            }
        }

        private void btnLop10_Click(object sender, EventArgs e)
        {
            lop = 10;
            lblGrade.Visible = true;
            lblGrade.Text = Convert.ToString(lop);
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var dsTuVung = db.Datas.Where(D => D.Lop10 == true).ToList();
                dgvVocab.DataSource = dsTuVung;
                //LoadTuVung2Dgv(Data);
            }
        }

        private void btnLop11_Click(object sender, EventArgs e)
        {
            lop = 11;
            lblGrade.Visible = true;
            lblGrade.Text = Convert.ToString(lop);
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var dsTuVung = db.Datas.Where(D => D.Lop11 == true).ToList();
                dgvVocab.DataSource = dsTuVung;
            }
        }

        private void btnLop12_Click(object sender, EventArgs e)
        {
            lop = 12;
            lblGrade.Visible = true;
            lblGrade.Text = Convert.ToString(lop);
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var dsTuVung = db.Datas.Where(D => D.Lop12 == true).ToList();
                dgvVocab.DataSource = dsTuVung;
            }
        }

        private void btnHome_Click(object sender, EventArgs e)
        {
            //lop = 12;
            lblGrade.Visible = true;
            //lblGrade.Text = Convert.ToString(lop);
            lblGrade.Text = "THPT";
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var dsTuVung = db.Datas.ToList();
                dgvVocab.DataSource = dsTuVung;
            }
        }

        private void btnThem_Click(object sender, EventArgs e)
        {
            Data dt = new Data();
            dt.Word = txtWord.Text.Trim();
            dt.Meaning = txtMeaning.Text.Trim();
            dt.Usage = txtUsage.Text.Trim();
            dt.Example = txtExample.Text.Trim();
            if (checkBoxLop10.Checked == true)
                dt.Lop10 = true;
            else dt.Lop10 = false;
            if (checkBoxLop11.Checked == true)
                dt.Lop11 = true;
            else dt.Lop11 = false;
            if (checkBoxLop12.Checked == true)
                dt.Lop12 = true;
            else dt.Lop12 = false;
            //Grade MaGrade = (Grade)cbbGrade.SelectedItem;
            ////dt.MaGrade = MaGrade.MaGrade;
            //int lop = MaGrade.MaGrade;

            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var kt = db.Datas.Where(D => D.Word == txtWord.Text).FirstOrDefault();
                if (kt != null)
                {
                    XtraMessageBox.Show("Từ vựng này đã được thêm vào cơ sở dữ liệu!!!",
                        "Thông báo", MessageBoxButtons.OK
                        , MessageBoxIcon.Warning);
                }
                else
                {
                    //Trim để xóa khoảng trong ở đầu và cuối chuỗi nếu user có nhập nhầm
                    if ((dt.Word != "")
                    && ((checkBoxLop10.Checked == true) ||
                        (checkBoxLop11.Checked == true) ||
                        (checkBoxLop12.Checked == true))
                    && (dt.Meaning != ""))
                    {
                        db.Datas.InsertOnSubmit(dt);
                        db.SubmitChanges();

                        //var Data = db.Datas.Where(D => D.MaGrade == dt.MaGrade).ToList();
                        //LoadTuVung2Dgv(Data);

                        //Load lai Data
                        switch (lop)
                        {
                            case 10:
                                var dsTuVung = db.Datas.Where(D => D.Lop10 == true).ToList();
                                dgvVocab.DataSource = dsTuVung;
                                int dem = dsTuVung.Count();
                                txtDem.Text = Convert.ToString(dem);
                                break;
                            case 11:
                                dsTuVung = db.Datas.Where(D => D.Lop11 == true).ToList();
                                dgvVocab.DataSource = dsTuVung;
                                dem = dsTuVung.Count();
                                txtDem.Text = Convert.ToString(dem);
                                break;
                            case 12:
                                dsTuVung = db.Datas.Where(D => D.Lop12 == true).ToList();
                                dgvVocab.DataSource = dsTuVung;
                                dem = dsTuVung.Count();
                                txtDem.Text = Convert.ToString(dem);
                                break;
                            default:
                                dsTuVung = db.Datas.ToList();
                                dgvVocab.DataSource = dsTuVung;
                                dem = dsTuVung.Count();
                                txtDem.Text = Convert.ToString(dem);
                                break;
                        }
                        XtraMessageBox.Show("Thêm thành công", "Thông báo"
                            , MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        XtraMessageBox.Show("Thêm từ vựng mới không thành công!!!",
                            "Thông báo", MessageBoxButtons.OK
                            , MessageBoxIcon.Warning);
                    }
                }
            }
        }

        private void btnSua_Click(object sender, EventArgs e)
        {
            //Grade MaGrade = (Grade)cbbGrade.SelectedItem;
            //int lop = MaGrade.MaGrade;
            try
            {
                using (dbmlDataDataContext db = new dbmlDataDataContext())
                {
                    string word = txtWord.Text;
                    Data wordSua = db.Datas.Where(D => D.Word == word).FirstOrDefault();

                    wordSua.Word = txtWord.Text;
                    wordSua.Meaning = txtMeaning.Text;
                    wordSua.Usage = txtUsage.Text;
                    wordSua.Example = txtExample.Text;
                    if (checkBoxLop10.Checked == true)
                        wordSua.Lop10 = true;
                    else wordSua.Lop10 = false;
                    if (checkBoxLop11.Checked == true)
                        wordSua.Lop11 = true;
                    else wordSua.Lop11 = false;
                    if (checkBoxLop12.Checked == true)
                        wordSua.Lop12 = true;
                    else wordSua.Lop12 = false;
                    db.SubmitChanges();

                    //Load lai Data
                    switch (lop)
                    {
                        case 10:
                            var dsTuVung = db.Datas.Where(D => D.Lop10 == true).ToList();
                            dgvVocab.DataSource = dsTuVung;
                            break;
                        case 11:
                            dsTuVung = db.Datas.Where(D => D.Lop11 == true).ToList();
                            dgvVocab.DataSource = dsTuVung;
                            break;
                        case 12:
                            dsTuVung = db.Datas.Where(D => D.Lop12 == true).ToList();
                            dgvVocab.DataSource = dsTuVung;
                            break;
                        default:
                            dsTuVung = db.Datas.ToList();
                            dgvVocab.DataSource = dsTuVung;
                            break;
                    }
                    XtraMessageBox.Show("Sửa thành công!", "Thông báo"
                            , MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception)
            {
                XtraMessageBox.Show("Không thể sửa từ vựng này!", "Thông báo"
                            , MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            
        }

        private void btnXoa_Click(object sender, EventArgs e)
        {
            try
            {
                using (dbmlDataDataContext db = new dbmlDataDataContext())
                {
                    string word = txtWord.Text;
                    Data wordXoa = db.Datas.Where(D => D.Word == word).FirstOrDefault();
                    db.Datas.DeleteOnSubmit(wordXoa);
                    db.SubmitChanges();
                    XtraMessageBox.Show("Xóa thành công", "Thông báo",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);

                    //Load lai Data
                    //Grade MaGrade = (Grade)cbbGrade.SelectedItem;
                    //int lop = MaGrade.MaGrade;
                    switch (lop)
                    {
                        case 10:
                            var dsTuVung = db.Datas.Where(D => D.Lop10 == true).ToList();
                            dgvVocab.DataSource = dsTuVung;
                            int dem = dsTuVung.Count();
                            txtDem.Text = Convert.ToString(dem);
                            break;
                        case 11:
                            dsTuVung = db.Datas.Where(D => D.Lop11 == true).ToList();
                            dgvVocab.DataSource = dsTuVung;
                            dem = dsTuVung.Count();
                            txtDem.Text = Convert.ToString(dem);
                            break;
                        case 12:
                            dsTuVung = db.Datas.Where(D => D.Lop12 == true).ToList();
                            dgvVocab.DataSource = dsTuVung;
                            dem = dsTuVung.Count();
                            txtDem.Text = Convert.ToString(dem);
                            break;
                        default:
                            dsTuVung = db.Datas.ToList();
                            dgvVocab.DataSource = dsTuVung;
                            dem = dsTuVung.Count();
                            txtDem.Text = Convert.ToString(dem);
                            break;
                    }
                    txtWord.Text = "";
                    txtMeaning.Text = "";
                    txtUsage.Text = "";
                    txtExample.Text = "";
                    checkBoxLop10.Checked = false;
                    checkBoxLop11.Checked = false;
                    checkBoxLop12.Checked = false;
                }
            }
            catch (Exception)
            {
                XtraMessageBox.Show("Không thể xóa từ vựng này!", "Thông báo",
                   MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void gridView1_RowCellClick(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e)
        {
            //string maWord = gridView1.Rows[e.RowIndex].Cells["Word"].Value.ToString();
            GridView view = sender as GridView;
            int index = view.GetDataRowHandleByGroupRowHandle(e.RowHandle);
            var maWord = view.GetRowCellValue(index, "Word");
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                Data wordTim = db.Datas.Where(D => D.Word == maWord.ToString()).FirstOrDefault();
                txtWord.Text = wordTim.Word;
                txtMeaning.Text = wordTim.Meaning;
                txtUsage.Text = wordTim.Usage;
                txtExample.Text = wordTim.Example;
                //cbbGrade.SelectedValue = wordTim.MaGrade;
                if (wordTim.Lop10 == true)
                    checkBoxLop10.Checked = true;
                else checkBoxLop10.Checked = false;
                if (wordTim.Lop11 == true)
                    checkBoxLop11.Checked = true;
                else checkBoxLop11.Checked = false;
                if (wordTim.Lop12 == true)
                    checkBoxLop12.Checked = true;
                else checkBoxLop12.Checked = false;
            }

            //string ma = view.FocusedRowHandle.ToString();
            //int so = view.FocusedRowHandle;
            //var maWord = view.GetRow(Convert.ToInt32(ma));
            //XtraMessageBox.Show(ma);

            #region Code1
            //var view = sender as GridView;
            //string maWord = view.FocusedValue.ToString();
            //using (dbmlDataDataContext db = new dbmlDataDataContext())
            //{
            //    Data wordTim = db.Datas.Where(D => D.Word == maWord.ToString()).FirstOrDefault();
            //    XtraMessageBox.Show(wordTim.Word);
            //}

            //using (dbmlDataDataContext db = new dbmlDataDataContext())
            //{
            //    Data wordTim = db.Datas.Where(D => D.Word == maWord.ToString()).FirstOrDefault();
            //    txtWord.Text = wordTim.Word;
            //    txtMeaning.Text = wordTim.Meaning;
            //    txtUsage.Text = wordTim.Usage;
            //    txtExample.Text = wordTim.Example;
            //    //cbbGrade.SelectedValue = wordTim.MaGrade;
            //    if (wordTim.Lop10 == true)
            //        checkBoxLop10.Checked = true;
            //    else checkBoxLop10.Checked = false;
            //    if (wordTim.Lop11 == true)
            //        checkBoxLop11.Checked = true;
            //    else checkBoxLop11.Checked = false;
            //    if (wordTim.Lop12 == true)
            //        checkBoxLop12.Checked = true;
            //    else checkBoxLop12.Checked = false;
            //}
            #endregion

            #region CodeFail
            //DataRowView focusRowView = (DataRowView)gridView1.GetSelectedRows();
            //if (view == null) return;

            //if (view.FocusedColumn.FieldName == "Word")
            //{

            //    var maWord = focusRowView["Word"];
            //    using (dbmlDataDataContext db = new dbmlDataDataContext())
            //    {
            //        Data wordTim = db.Datas.Where(D => D.Word == maWord.ToString()).FirstOrDefault();
            //        txtWord.Text = wordTim.Word;
            //        txtMeaning.Text = wordTim.Meaning;
            //        txtUsage.Text = wordTim.Usage;
            //        txtExample.Text = wordTim.Example;
            //        //cbbGrade.SelectedValue = wordTim.MaGrade;
            //        if (wordTim.Lop10 == true)
            //            checkBoxLop10.Checked = true;
            //        else checkBoxLop10.Checked = false;
            //        if (wordTim.Lop11 == true)
            //            checkBoxLop11.Checked = true;
            //        else checkBoxLop11.Checked = false;
            //        if (wordTim.Lop12 == true)
            //            checkBoxLop12.Checked = true;
            //        else checkBoxLop12.Checked = false;
            //    }
            //}
            #endregion
        }

        private void btnXuatFileExcel_Click(object sender, EventArgs e)
        {
            //GridView view = sender as GridView;
            //view = gridView1;
            //i += 1;
            //int dtrow = view.GetDataSourceRowIndex(i);
            //var maword = view.GetRowCellValue(dtrow, "Word");
            //XtraMessageBox.Show(maword.ToString());

            try
            {
                // creating Excel Application
                Microsoft.Office.Interop.Excel._Application app = new Microsoft.Office.Interop.Excel.Application();
                // creating new WorkBook within Excel application
                Microsoft.Office.Interop.Excel._Workbook workbook = app.Workbooks.Add(Type.Missing);
                // creating new Excelsheet in workbook
                Microsoft.Office.Interop.Excel._Worksheet worksheet = null;
                // see the excel sheet behind the program
                app.Visible = true;
                // get the reference of first sheet. By default its name is Sheet1.
                // store its reference to worksheet
                worksheet = workbook.Sheets["Sheet1"];
                worksheet = workbook.ActiveSheet;
                // changing the name of active sheet
                worksheet.Name = "Exported data from EVMD";
                // storing header part in Excel
                for (int i = 1; i < gridView1.Columns.Count + 1; i++)
                {
                    
                    //worksheet.Cells.HorizontalAlignment
                    //    = DevExpress.Utils.HorzAlignment.Center;
                    //worksheet.Cells.Style = System.Drawing.FontStyle.Bold;
                    worksheet.Cells[1, i] = gridView1.Columns[i - 1].FieldName.ToString();
                }
                //worksheet.Cells[1, 1] = "Từ vựng";
                //worksheet.Cells[1, 2] = "Nghĩa của từ";
                //worksheet.Cells[1, 3] = "Từ loại";
                //worksheet.Cells[1, 4] = "Ví dụ minh họa";
                //worksheet.Cells[1, 5] = "Lớp 10";
                //worksheet.Cells[1, 6] = "Lớp 11";
                //worksheet.Cells[1, 7] = "Lớp 12";

                // storing Each row and column value to excel sheet
                GridView view = sender as GridView;
                view = gridView1;
                for (int i = 0; i < gridView1.RowCount - 1; i++)
                {
                    for (int j = 0; j < gridView1.Columns.Count; j++)
                    {
                        //worksheet.Cells[i + 2, j + 1] = gridView1.Rows[i].Cells[j].Value.ToString();
                        string str = "";
                        switch (j)
                        {
                            case 0:
                                str = "Word"; break;
                            case 1:
                                str = "Meaning"; break;
                            case 2:
                                str = "Usage"; break;
                            case 3:
                                str = "Example"; break;
                            case 4:
                                str = "Lop10"; break;
                            case 5:
                                str = "Lop11"; break;
                            case 6:
                                str = "Lop12"; break;
                            default: break;
                        }
                        int dtrow = view.GetDataSourceRowIndex(i);
                        var maword = view.GetRowCellValue(dtrow, str);
                        //XtraMessageBox.Show(maword.ToString());
                        worksheet.Cells[i + 2, j + 1] = maword.ToString();
                    }
                }
                // save the application
                bool kt = true;
                while (kt)
                {
                    int t = 0;
                    string save = "D:\\Data" + t.ToString() + ".xlsx";
                    try
                    {
                        workbook.SaveAs(save, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                        kt = false;
                    }
                    catch (Exception)
                    {
                        ++t;
                        if (t > 10) kt=false;
                        break;
                    }
                }
               
                //workbook.SaveAs("D:\\Data.xlsx", Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                
                // Exit from the application
                app.Quit();
                XtraMessageBox.Show("Xuất file thành công.", "Thông báo",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception)
            {
                XtraMessageBox.Show("Xuất file không thành công.", "Thông báo",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            finally
            {

            }
        }

        private void btnRefresh_ItemClick(object sender, ItemClickEventArgs e)
        {
            txtWord.Text = "";
            txtMeaning.Text = "";
            txtUsage.Text = "";
            txtExample.Text = "";
            checkBoxLop10.Checked = false;
            checkBoxLop11.Checked = false;
            checkBoxLop12.Checked = false;
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                var dsTuVung = db.Datas.ToList();
                dgvVocab.DataSource = dsTuVung;
            }
        }

        private void btnUser_ItemClick(object sender, ItemClickEventArgs e)
        {
            this.Close();
        }

        private void btnChangePass_ItemClick(object sender, ItemClickEventArgs e)
        {
            frmChangePass frmChangePass = new frmChangePass();
            frmChangePass.ShowDialog();
        }

        private void txtWord_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void btnExit_ItemClick(object sender, ItemClickEventArgs e)
        {
            DialogResult yes = XtraMessageBox.Show("Bạn có muốn cửa sổ giao diện này???", "Thông báo"
              , MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);

            if (yes == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void btnCopy_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                if (txtWord.Text != null)
                    Clipboard.SetText(txtWord.Text);
            }
            catch (Exception)
            {
                Clipboard.Clear();
            }
        }

        private void btnPaste_ItemClick(object sender, ItemClickEventArgs e)
        {
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                string wordTimKiem = Clipboard.GetText();
                Data word = db.Datas.Where(D => D.Word == wordTimKiem).FirstOrDefault();
                if (word != null)
                {
                    txtWord.Text = word.Word;
                    txtMeaning.Text = word.Meaning;
                    txtUsage.Text = word.Usage;
                    txtExample.Text = word.Example;
                    if (word.Lop10 == true)
                        checkBoxLop10.Checked = true;
                    else checkBoxLop10.Checked = false;
                    if (word.Lop11 == true)
                        checkBoxLop11.Checked = true;
                    else checkBoxLop11.Checked = false;
                    if (word.Lop12 == true)
                        checkBoxLop12.Checked = true;
                    else checkBoxLop12.Checked = false;
                }
                else
                {
                    txtWord.Text = wordTimKiem;
                }
            }
        }

        private void txtWord_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                using (dbmlDataDataContext db = new dbmlDataDataContext())
                {
                    var kt = db.Datas.Where(D => D.Word == txtWord.Text).FirstOrDefault();
                    if (kt != null)
                    {
                        txtWord.Text = kt.Word;
                        txtMeaning.Text = kt.Meaning;
                        txtUsage.Text = kt.Usage;
                        txtExample.Text = kt.Example;
                        if (kt.Lop10 == true)
                            checkBoxLop10.Checked = true;
                        else checkBoxLop10.Checked = false;
                        if (kt.Lop11 == true)
                            checkBoxLop11.Checked = true;
                        else checkBoxLop11.Checked = false;
                        if (kt.Lop12 == true)
                            checkBoxLop12.Checked = true;
                        else checkBoxLop12.Checked = false;
                    }
                    else
                    {
                        txtMeaning.Text = "";
                        txtUsage.Text = "";
                        txtExample.Text = "";
                        checkBoxLop10.Checked = false;
                        checkBoxLop11.Checked = false;
                        checkBoxLop12.Checked = false;
                    }

                }
            }
        }

        private void txtWord_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Tab)
            {
                using (dbmlDataDataContext db = new dbmlDataDataContext())
                {
                    var kt = db.Datas.Where(D => D.Word == txtWord.Text).FirstOrDefault();
                    if (kt != null)
                    {
                        txtWord.Text = kt.Word;
                        txtMeaning.Text = kt.Meaning;
                        txtUsage.Text = kt.Usage;
                        txtExample.Text = kt.Example;
                        if (kt.Lop10 == true)
                            checkBoxLop10.Checked = true;
                        if (kt.Lop11 == true)
                            checkBoxLop11.Checked = true;
                        if (kt.Lop12 == true)
                            checkBoxLop12.Checked = true;
                    }
                    else
                    {
                        txtMeaning.Text = "";
                        txtUsage.Text = "";
                        txtExample.Text = "";
                        checkBoxLop10.Checked = false;
                        checkBoxLop11.Checked = false;
                        checkBoxLop12.Checked = false;
                    }
                }
            }
        }

        private void btnNhapFileExcel_Click(object sender, EventArgs e)
        {
            frmImport frmNhapFileExcel = new frmImport();
            frmNhapFileExcel.ShowDialog();
            //Load lai data
            using (dbmlDataDataContext db = new dbmlDataDataContext())
            {
                switch (lop)
                {
                    case 10:
                        var dsTuVung = db.Datas.Where(D => D.Lop10 == true).ToList();
                        dgvVocab.DataSource = dsTuVung;
                        int dem = dsTuVung.Count();
                        txtDem.Text = Convert.ToString(dem);
                        break;
                    case 11:
                        dsTuVung = db.Datas.Where(D => D.Lop11 == true).ToList();
                        dgvVocab.DataSource = dsTuVung;
                        dem = dsTuVung.Count();
                        txtDem.Text = Convert.ToString(dem);
                        break;
                    case 12:
                        dsTuVung = db.Datas.Where(D => D.Lop12 == true).ToList();
                        dgvVocab.DataSource = dsTuVung;
                        dem = dsTuVung.Count();
                        txtDem.Text = Convert.ToString(dem);
                        break;
                    default:
                        dsTuVung = db.Datas.ToList();
                        dgvVocab.DataSource = dsTuVung;
                        dem = dsTuVung.Count();
                        txtDem.Text = Convert.ToString(dem);
                        break;
                }
            }
                
        }
    }
}
